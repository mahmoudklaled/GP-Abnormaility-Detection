# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from __future__ import division
from __future__ import print_function

import sys

import numpy as np
import pandas as pd
import torch
import time
import os
import json
import argparse
import itertools
from sklearn import metrics

import ShowPredictionResults
import util
from train import transform_data, DenseNet
from joblib import Memory
import shutil
import predict
from PIL import Image

from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QPixmap
from PyQt5.QtWidgets import QFileDialog


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setStyleSheet("#MainWindow{border-image:url(back.jpg)}")
        MainWindow.resize(1920, 1080)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.inputImage = QtWidgets.QLabel(self.centralwidget)
        self.inputImage.setGeometry(QtCore.QRect(10, 80, 431, 461))
        self.inputImage.setObjectName("inputImage")

        self.classificationResult = QtWidgets.QLabel(self.centralwidget)
        self.classificationResult.setGeometry(QtCore.QRect(550, 80, 800, 650))
        self.classificationResult.setObjectName("classificationResult")

        self.localizationImage = QtWidgets.QLabel(self.centralwidget)
        self.localizationImage.setGeometry(QtCore.QRect(1450, 80, 431, 461))
        self.localizationImage.setObjectName("localizationImage")


        self.inputImageLabel = QtWidgets.QLabel(self.centralwidget)
        self.inputImageLabel.setGeometry(QtCore.QRect(150, 15, 200, 50))
        self.inputImageLabel.setObjectName("inputImageLabel")
        self.inputImageLabel.setText("Input Image")
        # self.inputImageLabel.setStyleSheet('QLabel#inputImageLabel {color: black; font-size: 20pt; background-color: lightgreen}')
        self.inputImageLabel.setStyleSheet('QLabel#inputImageLabel {color: Yellow; font-size: 20pt}')



        self.classificationResultLabel = QtWidgets.QLabel(self.centralwidget)
        self.classificationResultLabel.setGeometry(QtCore.QRect(850, 15, 200, 50))
        self.classificationResultLabel.setObjectName("classificationResultLabel")
        self.classificationResultLabel.setText("Classification")
        self.classificationResultLabel.setStyleSheet('QLabel#classificationResultLabel {color: Yellow; font-size: 20pt}')

        self.localizationImageLabel = QtWidgets.QLabel(self.centralwidget)
        self.localizationImageLabel.setGeometry(QtCore.QRect(1600, 15, 200, 50))
        self.localizationImageLabel.setObjectName("localizationImageLabel")
        self.localizationImageLabel.setText("Localization")
        self.localizationImageLabel.setStyleSheet('QLabel#localizationImageLabel {color: Yellow; font-size: 20pt;}')




        self.browsBtn = QtWidgets.QPushButton(self.centralwidget)
        self.browsBtn.setGeometry(QtCore.QRect(20, 800, 111, 41))
        self.browsBtn.setObjectName("browsBtn")

        self.diagnosisBtn = QtWidgets.QPushButton(self.centralwidget)
        self.diagnosisBtn.setGeometry(QtCore.QRect(20, 850, 111, 41))
        self.diagnosisBtn.setObjectName("diagnosisBtn")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1920, 26))
        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Chest X-Ray Diagnosis"))
        self.browsBtn.setText(_translate("MainWindow", "Brows Image"))
        self.diagnosisBtn.setText(_translate("MainWindow", "Start Diagnosis"))


class MainWindow(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        QtWidgets.QMainWindow.__init__(self, parent=parent)
        self.setupUi(self)
        self.browsBtn.clicked.connect(self.browsImage)
        self.diagnosisBtn.clicked.connect(self.startDiagnosis)
        shutil.rmtree('cache')

    def startDiagnosis(self):
        # clear cache folder
        if os.path.exists('cache'):
            shutil.rmtree('cache')

        start = time.time()
        predict_command = "python predict.py val0.065235_train0.095882_epoch10"
        os.system(predict_command)
        end = time.time()
        print('Execution time is : ', (end - start))


        # show classification result
        ShowPredictionResults.ShowPrediction()
        pixmap = QPixmap('result.png').scaled(800, 650)
        self.classificationResult.setPixmap(QPixmap(pixmap))


        # show heatmap image
        os.system('python HeatMapGenerator.py')

        # # resize image in gui
        pixmap = QPixmap('heatmap.png')
        self.localizationImage.setPixmap(QPixmap(pixmap).scaled(500, 461))

    def browsImage(self):
        # clear images directory
        if os.path.exists('images'):
            shutil.rmtree('images')
        os.mkdir('images')


        # clear gui
        self.inputImage.clear()
        self.classificationResult.clear()
        self.localizationImage.clear()


        # read the image
        desktop_path = os.path.join(os.environ['USERPROFILE'], 'Desktop')
        fname = QFileDialog.getOpenFileName(self, 'Open file', desktop_path, "Image files (*.jpg *.png)")
        imagePath = fname[0]

        #copy image to the directory(images)
        shutil.copy(imagePath, 'images')

        # remove exist test file and create new one
        if os.path.exists('data/test.csv'):
            os.remove('data/test.csv')

        # add image to the test file (create the file if not exist)
        index_last_slash = imagePath.rfind('/')
        imagePath = 'images{}'.format(imagePath[index_last_slash:])
        test_file = pd.DataFrame()
        ser = pd.Series([imagePath])
        test_file = test_file.append(ser, ignore_index=True)
        test_file.columns = ['Path']
        test_file.to_csv('data/test.csv', index=False)

        # resize the image in images directory
        image = Image.open(imagePath)
        resized_iamge = image.resize((431, 461))
        resized_iamge.save(imagePath)

        # show the image in GUI form
        pixmap = QPixmap(imagePath)
        self.inputImage.setPixmap(QPixmap(pixmap))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = MainWindow()

    MainWindow.show()

    sys.exit(app.exec_())
